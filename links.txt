ubuntu nginx apache
http://ãîëÿíäèí.ðô/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%B8-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-apache-2-nginx-php-5-mysql-memcached-eaccelerator-%D0%B2-ubuntu/

ubuntu nginx php-fpm
http://sanstv.ru/Ubuntu%20+%20nginx%20+%20php%20+%20mysql%20+%20memcached%20+%20eAccelerator
http://askubuntu.com/questions/153226/how-do-i-install-php-fpm-5-4-on-12-04
https://extremeshok.com/2012/10/08/ubuntu-12-04-web-application-node-nginx-php5-fpm-phpmyadmin-mariaconfig.inc.phpdb-mysql-apc-geoip-ioncube-tuning/

https://github.com/samdark/yiiframework_ru_cookbook


Install Nginx
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx

Install php 5.5 and php-fpm (https://rtcamp.com/tutorials/linux/ubuntu-php-mysql-nginx-postfix/)
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ondrej/php5
sudo apt-get update
sudo apt-get install php5-common php5-mysqlnd php5-xmlrpc php5-curl php5-gd php5-cli php5-fpm php-pear php5-dev php5-imap php5-mcrypt
или
sudo apt-get install php5-common php5-mysqlnd php5-xmlrpc php5-curl php5-gd php5-cli php5-fpm php-pear php5-dev php5-imap php5-mcrypt php5-intl php5-imagick php5-imap php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xsl php5-xdebug memcached php5-memcached

php -v

обновить версию php до последней:
sudo add-apt-repository ppa:ondrej/php5 && sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade

sudo vim /etc/php5/fpm/php.ini
ctrl+f: cgi
Теперь нам нужно устранить уязвимости в PHP
Находим там строку
;cgi.fix_pathinfo = 1
И приводим её к виду
cgi.fix_pathinfo = 0
Делаем рестарт PHP-FPM
sudo service php5-fpm restart

Изменяем настройки виртуального хоста
sudo vim /etc/nginx/conf.d/default.conf
вставить следующие настройки:
server {
        listen   80;     

        root /usr/share/nginx/html;
        index index.php index.html index.htm;

        server_name localhost;

        location / {
                try_files $uri $uri/ /index.php;
        }

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
              root /usr/share/nginx/www;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
                #fastcgi_pass 127.0.0.1:9000;
                # With php5-fpm:
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
                
        }

}
закрыть и сохранить

Далее нам нужно проверить установился ли php-fpm. Для этого делаем следующее.
sudo vim /usr/share/nginx/html/index.php
И пишем в него
<?php phpinfo(); ?>
закрыть и сохранить

Удаляем index.html
sudo rm /usr/share/nginx/html/index.html

добавим еще php5 расширений
sudo apt-get install php5-mysql php5-intl php5-imagick php5-imap php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xsl php5-xdebug memcached php5-memcached

установим phpMyAdmin
sudo apt-get install phpmyadmin

Изменяем настройки виртуального хоста
sudo vim /etc/nginx/conf.d/default.conf
вставить следующие настройки:
server {
        listen   80;     

        root /usr/share/nginx/html;
        index index.php index.html index.htm;

        server_name localhost;

        location / {
                try_files $uri $uri/ /index.html;
        }

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
              root /usr/share/nginx/www;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
                #fastcgi_pass 127.0.0.1:9000;
                # With php5-fpm:
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
        }

    location /phpmyadmin {
               root /usr/share/;
               index index.php index.html index.htm;
               location ~ ^/phpmyadmin/(.+\.php)$ {
                       try_files $uri =404;
                       root /usr/share/;
                       fastcgi_pass unix:/var/run/php5-fpm.sock;
                       fastcgi_index index.php;
                       fastcgi_param SCRIPT_FILENAME $request_filename;
                       include /etc/nginx/fastcgi_params;
               }
               location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
                       root /usr/share/;
               }
        }
        location /phpMyAdmin {
               rewrite ^/* /phpmyadmin last;
        }
}
закрыть и сохранить

Для разработки я использую PHP IDE PhpStorm. Скачать её можно на официальном сайте www.jetbrains.com/phpstorm/. Скачиваем и распаковываем в удобную для вас папку. Но для начала нам нужно установить Oracle Java 7.
Добавляем нужный репозиторий и обновляемся
sudo add-apt-repository ppa:webupd8team/java -y
sudo apt-get update
Затем устанавливаем JDK (Java Development Kit)
sudo apt-get install oracle-jdk7-installer
или
sudo add-apt-repository ppa:webupd8team/java -y && sudo apt-get update && sudo apt-get install oracle-jdk7-installer

разрешаем вход в phpmyadmin без пароля для root'а:
sudo vim /etc/phpmyadmin/config.inc.php
$cfg['Servers'][$i]['host'] = 'localhost';
$cfg['Servers'][$i]['user'] = 'root';
$cfg['Servers'][$i]['password'] = '';
$cfg['Servers'][$i]['extension'] = 'mysqli';
$cfg['Servers'][$i]['connect_type'] = 'tcp';
$cfg['Servers'][$i]['compress'] = false;
$cfg['Servers'][$i]['auth_type'] = 'config';
раскомментировать строку - $cfg['Servers'][$i]['AllowNoPassword'] = TRUE;
закрыть и сохранить

скачанный архив PhpStorm разархивируем и переносим в папку opt
sudo mv PhpStorm/ /opt
затем надо указать путь до установленной java '/usr/lib/jvm/java-7-oracle' в файле PhpStorm/bin/phpstorm.sh в самом начале перед первым if пишем:
export JDK_HOME=/usr/lib/jvm/java-7-oracle
переходим в дирекорию PhpStorm:
cd /opt/PhpStorm/bin
запускаем первый раз PhpStorm:
sudo sh phpstorm.sh
После первого запуска Phpstorm, сделайте действия через верхнее меню Phpstorm:
Tools -> Create Desktop Entry -> ok
затем слева в панели с иконками нажать на иконку PhpStorm'а и добавить в launcher

установка composer (https://getcomposer.org/doc/00-intro.md#installation-nix):
если нет curl'а, то его надо установить:
sudo apt-get install curl
curl -sS https://getcomposer.org/installer | php
теперь php composer.phar будет запускать команды composer'а
еще можно перенести composer в директорию:
mv composer.phar /usr/local/bin/composer
и теперь все команды composer'а можно запускать как, например: composer -v

https://github.com/Zhanat87 Zhanat87 zlodey87
https://bitbucket.org/Zhanat87 iskakov_zhanat@mail.ru zlodey87

https://github.com/Zhanat1987 Zhanat1987 zlodey1987 iskakov.zhanat@gmail.comzlodey87
https://bitbucket.org/Zhanat1987 Zhanat1987 zlodey1987 iskakov.zhanat@gmail.comzlodey87

установка браузера chromium:
sudo apt-get install chromium-browser

установка браузера chrome:
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
sudo apt-get update
sudo apt-get install google-chrome-stable
or
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - && sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' && sudo apt-get update && sudo apt-get install google-chrome-stable

установка git:
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
or
sudo add-apt-repository ppa:git-core/ppa && sudo apt-get update && sudo apt-get install git

указать ваше имя и адрес электронной почты
git config --global user.name "Iskakov Zhanat"
git config --global user.email iskakov.zhanat@gmail.com
Выбор редактора
git config --global core.editor notepad++ (notepad++)
git config --global core.editor subl (sublime text)
git будет сохранять пароль в памяти, по умолчанию на 15 минут:
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=3600'
создать ssh-ключ (https://help.github.com/articles/generating-ssh-keys):
ssh-keygen -t rsa -C "iskakov.zhanat@gmail.com"
cd /home/zhanat/.ssh
ssh-add id_rsa
задать пароль или оставить пустым
добавить ключ на github (https://github.com/settings/ssh):
Add SSH key -> задать заголовок, например 'key', затем скопировать содержимое файла /home/zhanat/.ssh/id_rsa.pub 
и вставить в поле формы, затем спроит пароль, указал пароль от github'а - zlodey1987

добавить ключ на bitbucket (https://bitbucket.org/account/user/Zhanat1987/ssh-keys/):
http://gleb.pyatin.com/post/62728269139/bitbucket-setup-ssh-keys-ubuntu
Add key -> задать label, например 'key', затем скопировать содержимое файла /home/zhanat/.ssh/id_rsa.pub 
Чтобы протестировать ключ:
ssh -T git@bitbucket.org -i ~/.ssh/id_rsa

настройка yii 2 и nginx:
создадим папку /home/zhanat/sites и перейдем в нее:
mkdir /home/zhanat/sites && cd /home/zhanat/sites
обновим composer:
composer self-update
создадим yii 2 advanced template:
composer create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced yii2.advanced
cd yii2.advanced && php init
создадим бд yii2advanced и установим параметры подключения к бд в 'common/config/main-local.php'
сделаем миграции в бд:
php yii migrate
mkdir /home/zhanat/sites/yii2.advanced/log
sudo vim /etc/nginx/sites-available/yii2.advanced
server {
    set $host_path "/home/zhanat/sites/yii2.advanced";
    access_log  /home/zhanat/sites/yii2.advanced/log/access.log;

    server_name  yii2.advanced;
    root   $host_path/frontend/web;

    charset utf-8;

    location / {
		set $yii_bootstrap "index.php";
        index  index.html $yii_bootstrap;
        try_files $uri $uri/ /$yii_bootstrap?$args;
    }

    location /backend {
    	root   $host_path/backend/web;
		set $yii_bootstrap "index.php";
        index  index.html $yii_bootstrap;
        try_files $uri $uri/ /$yii_bootstrap?$args;
    }

    location ~ ^/(protected|framework|themes/\w+/views) {
        deny  all;
    }

    #отключаем обработку запросов фреймворком к несуществующим статичным файлам
    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
        try_files $uri =404;
    }

    # передаем PHP-скрипт серверу FastCGI, прослушивающему адрес 127.0.0.1:9000
    #
    location ~ \.php {
        fastcgi_split_path_info  ^(.+\.php)(.*)$;

        #позволяем yii перехватывать запросы к несуществующим PHP-файлам
        set $fsn /$yii_bootstrap;
        if (-f $document_root$fastcgi_script_name){
            set $fsn $fastcgi_script_name;
        }

        # fastcgi_pass 127.0.0.1:9000;
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fsn;

        #PATH_INFO и PATH_TRANSLATED могут быть опущены, но стандарт RFC 3875 определяет для CGI
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  $document_root$fsn;
    }

    location ~ /\.ht {
        deny  all;
    }
}
сохраняем и закрывам
затем делаем symlink:
sudo ln -s /etc/nginx/sites-available/yii2.advanced /etc/nginx/sites-enabled/yii2.advanced
добавляем хост:
sudo vim /etc/hosts
127.0.0.1       yii2.advanced
перезагружаем nginx:
sudo service nginx restart

symlink можно удалить, например:
sudo rm /etc/nginx/sites-enabled/default

yii2.advanced/backend - не сработал, теперь попробуем добавить субдомен backend.yii2.advanced:
подкорректируем конфиг для yii2.advanced, просто удалим секцию - location /backend:
sudo vim /etc/nginx/sites-available/yii2.advanced
server {
    set $host_path "/home/zhanat/sites/yii2.advanced";
    access_log  /home/zhanat/sites/yii2.advanced/log/access.log;

    server_name  yii2.advanced;
    root   $host_path/frontend/web;

    charset utf-8;

    location / {
		set $yii_bootstrap "index.php";
        index  index.html $yii_bootstrap;
        try_files $uri $uri/ /$yii_bootstrap?$args;
    }

    location ~ ^/(protected|framework|themes/\w+/views) {
        deny  all;
    }

    #отключаем обработку запросов фреймворком к несуществующим статичным файлам
    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
        try_files $uri =404;
    }

    # передаем PHP-скрипт серверу FastCGI, прослушивающему адрес 127.0.0.1:9000
    #
    location ~ \.php {
        fastcgi_split_path_info  ^(.+\.php)(.*)$;

        #позволяем yii перехватывать запросы к несуществующим PHP-файлам
        set $fsn /$yii_bootstrap;
        if (-f $document_root$fastcgi_script_name){
            set $fsn $fastcgi_script_name;
        }

        # fastcgi_pass 127.0.0.1:9000;
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fsn;

        #PATH_INFO и PATH_TRANSLATED могут быть опущены, но стандарт RFC 3875 определяет для CGI
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  $document_root$fsn;
    }

    location ~ /\.ht {
        deny  all;
    }
}
сохраняем и закрывам
создадим конфиг для backend.yii2.advanced:
sudo vim /etc/nginx/sites-available/backend.yii2.advanced
server {
    set $host_path "/home/zhanat/sites/yii2.advanced";
    access_log  /home/zhanat/sites/yii2.advanced/log/backend_access.log;

    server_name  backend.yii2.advanced;
    root   $host_path/backend/web;

    charset utf-8;

    location / {
		set $yii_bootstrap "index.php";
        index  index.html $yii_bootstrap;
        try_files $uri $uri/ /$yii_bootstrap?$args;
    }

    location ~ ^/(protected|framework|themes/\w+/views) {
        deny  all;
    }

    #отключаем обработку запросов фреймворком к несуществующим статичным файлам
    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
        try_files $uri =404;
    }

    # передаем PHP-скрипт серверу FastCGI, прослушивающему адрес 127.0.0.1:9000
    #
    location ~ \.php {
        fastcgi_split_path_info  ^(.+\.php)(.*)$;

        #позволяем yii перехватывать запросы к несуществующим PHP-файлам
        set $fsn /$yii_bootstrap;
        if (-f $document_root$fastcgi_script_name){
            set $fsn $fastcgi_script_name;
        }

        # fastcgi_pass 127.0.0.1:9000;
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fsn;

        #PATH_INFO и PATH_TRANSLATED могут быть опущены, но стандарт RFC 3875 определяет для CGI
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  $document_root$fsn;
    }

    location ~ /\.ht {
        deny  all;
    }
}
сохраняем и закрываем
затем делаем symlink:
sudo ln -s /etc/nginx/sites-available/backend.yii2.advanced /etc/nginx/sites-enabled/backend.yii2.advanced
добавляем хост:
sudo vim /etc/hosts
127.0.0.1       backend.yii2.advanced
перезагружаем nginx:
sudo service nginx restart

настройка xdebug + phpstorm:
sudo vim /etc/php5/fpm/php.ini - тут нет настроек xdebug'а, они лежат в файле:
sudo vim /etc/php5/cli/conf.d/20-xdebug.ini
добавить там строку:
xdebug.idekey = "PHPSTORM"
сохраняем и закрываем
sudo service php5-fpm restart
открываем в браузере страницу:
http://www.jetbrains.com/phpstorm/marklets/
в разделе phpstorm нажимаем generate и на каждой ссылке нажимаем правой кнопкой мыши и потом 'Bookmark this link'
http://habrahabr.ru/post/181848/
http://www.youtube.com/results?search_query=phpstorm+7+%D0%B8+xdebug&page=1
http://habrahabr.ru/post/209024/
http://drupalace.ru/lesson/nastroyka-otladchika-xdebug-mezhdu-ide-phpstorm-i-serverom-open-server
http://webdev-tales.ru/post/19072925255/php-denwer-xdebug-phpstorm
http://yiiframework.ru/forum/viewtopic.php?f=17&t=14281
firefox как настроить bookmarks

добавить пользователя Zhanat1987, как contributor'а в репозитарий:
https://github.com/Zhanat87/yii2advanced/settings/collaboration
надо сгенерировать еще один ключ и добавить его для https://github.com/Zhanat87 windows,
чтобы https://github.com/Zhanat1987 мог работать с этим репозиторием на ubuntu
склонировать объект с github'а:
cd /home/zhanat/sites
mkdir yii2.translate
cd yii2.translate
- иниц-ть (создать) репозиторий в тек-м каталоге
git init
- доб-ть к отслеживанию и проиндексировать все файлы и папки в тек-м каталоге
git add .
- доб-ть удал-й репозитарий, кот-й только что был создан на github'е 
и указать ему alias = origin
git remote add origin https://github.com/Zhanat87/yii2advanced.git
- затем чтобы не было конфликтов надо скачать данные с удал-го реп-я на лок-й
git pull origin master
или если было клонир-е реп-я и кто-то внес изм-я, то надо сначала скачать 
с удал-го реп-я на лок-й и слить 2 ветки (origin - удал-й реп-й и master - лок-й реп-й)
git fetch origin master
git merge origin/master
- затем закачать свой посл-й коммит (для первого раза - это все файлы) на удал-й реп-й
git push origin master
- затем запросит логин и пароль (их надо будет указать, например Zhanat87 и zlodey87)
- все затем последует закачка файлов на удал-й реп-й

master password в phpstorm'е:
zlodey1987

зайти в phpstorm и там просто настроить новый проект с github'а
затем через shell перейти в папку проекта и запустить composer для скачивания vendor'ов:
cd /home/zhanat/sites/yii2.advanced && composer self-update && composer install

php mkdir permission denied:
sudo chown -R www-data:www-data /home/zhanat/sites
Изменение прав пользователя Ubuntu (http://myhouselife.ru/izmenenie-prav-polzovatelya)

sudo chown -R zhanat:zhanat /home/zhanat/sites

работа с ветками в git:
	- создаем новую ветку и переключаемся на нее:
	git branch imya_novoi_vetki
	git checkout imya_novoi_vetki
	or 
	git checkout -b imya_novoi_vetki
	теперь работаем на этой ветки так же как обычно (commit, pull, push)
	- затем когда все сделано на новой ветки и ее надо слить с основной:
	git checkout master
	git merge imya_novoi_vetki
	git branch -d imya_novoi_vetki
http://evasive.ru/9c07c3cd906aa3a02cba77b18c1a573b.html
https://www.atlassian.com/git/tutorial/git-branches
http://git-scm.com/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git

меняем пользоватля и группу php-fpm'а:
sudo vim /etc/php5/fpm/php-fpm.conf:
если в этом файле нет этих настроек, тогда меняем - sudo vim /etc/php5/fpm/pool.d/www.conf:
user = www-data -> user = zhanat
group = nobody -> group = zhanat
закрываем и сохраняем
sudo /etc/init.d/php5-fpm restart

phpstorm длина строки:
File -> Settings -> Code Style -> General -> Right margin (columns) -> 80
phpstorm автоперенос строки:
File -> Settings -> Code Style -> General -> [x] Wrap when typing reaches right margin
phpstorm покзывать нумерацию строк:
File -> Settings -> Editor -> Appearance -> [x] Show line numbers
http://habrahabr.ru/post/157409/























































